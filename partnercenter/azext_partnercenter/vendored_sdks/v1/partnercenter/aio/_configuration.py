# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.1, generator: @autorest/python@6.1.6)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional

from azure.core.configuration import Configuration
from azure.core.pipeline import policies

VERSION = "unknown"


class HttpsApiPartnerMicrosoftComV10IngestionConfiguration(
    Configuration
):  # pylint: disable=too-many-instance-attributes
    """Configuration for HttpsApiPartnerMicrosoftComV10Ingestion.

    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param authorization: User authorization. Required.
    :type authorization: str
    :param product_id: ID of product. Required.
    :type product_id: str
    :param instance_id: Resource instance ID. Required.
    :type instance_id: str
    :param submission_id: ID of submission. Required.
    :type submission_id: str
    :param variant_id: ID of variant. Required.
    :type variant_id: str
    :param listing_id: ID of listing. Required.
    :type listing_id: str
    :param asset_id: ID of asset. Required.
    :type asset_id: str
    :param image_id: ID of image. Required.
    :type image_id: str
    :param feature_availability_id: Feature availability ID. Required.
    :type feature_availability_id: str
    :param client_request_id: ID of request provIDed by user. Default value is None.
    :type client_request_id: str
    :param expand: Use $expand to include MarketStates, PriceSchedules, and Trial in
     request/response. Default value is None.
    :type expand: str
    """

    def __init__(
        self,
        authorization: str,
        product_id: str,
        instance_id: str,
        submission_id: str,
        variant_id: str,
        listing_id: str,
        asset_id: str,
        image_id: str,
        feature_availability_id: str,
        client_request_id: Optional[str] = None,
        expand: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        super(HttpsApiPartnerMicrosoftComV10IngestionConfiguration, self).__init__(**kwargs)
        if authorization is None:
            raise ValueError("Parameter 'authorization' must not be None.")
        if product_id is None:
            raise ValueError("Parameter 'product_id' must not be None.")
        if instance_id is None:
            raise ValueError("Parameter 'instance_id' must not be None.")
        if submission_id is None:
            raise ValueError("Parameter 'submission_id' must not be None.")
        if variant_id is None:
            raise ValueError("Parameter 'variant_id' must not be None.")
        if listing_id is None:
            raise ValueError("Parameter 'listing_id' must not be None.")
        if asset_id is None:
            raise ValueError("Parameter 'asset_id' must not be None.")
        if image_id is None:
            raise ValueError("Parameter 'image_id' must not be None.")
        if feature_availability_id is None:
            raise ValueError("Parameter 'feature_availability_id' must not be None.")

        self.authorization = authorization
        self.product_id = product_id
        self.instance_id = instance_id
        self.submission_id = submission_id
        self.variant_id = variant_id
        self.listing_id = listing_id
        self.asset_id = asset_id
        self.image_id = image_id
        self.feature_availability_id = feature_availability_id
        self.client_request_id = client_request_id
        self.expand = expand
        kwargs.setdefault("sdk_moniker", "httpsapipartnermicrosoftcomv10ingestion/{}".format(VERSION))
        self._configure(**kwargs)

    def _configure(self, **kwargs: Any) -> None:
        self.user_agent_policy = kwargs.get("user_agent_policy") or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get("headers_policy") or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get("proxy_policy") or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get("logging_policy") or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get("http_logging_policy") or policies.HttpLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get("retry_policy") or policies.AsyncRetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get("custom_hook_policy") or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get("redirect_policy") or policies.AsyncRedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get("authentication_policy")
