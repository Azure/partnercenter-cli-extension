# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.1, generator: @autorest/python@6.1.6)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._operations._operations import (
    build_delete_product_by_product_id_request,
    build_delete_product_cosell_asset_by_cosell_asset_id_request,
    build_delete_product_listing_asset_by_listing_id_request,
    build_delete_product_listing_by_listing_id_request,
    build_delete_product_listing_image_by_listing_id_request,
    build_delete_product_listing_video_by_listing_id_request,
    build_delete_product_package_by_package_id_request,
    build_delete_product_submission_by_submission_id_request,
    build_delete_product_variant_by_variant_id_request,
    build_get_product_availability_get_by_instance_id_s_by_instance_id_request,
    build_get_product_availability_productavailabilitiess_by_product_id_request,
    build_get_product_availability_request,
    build_get_product_branches_get_by_module_s_by_module_request,
    build_get_product_by_product_id_request,
    build_get_product_cosell_asset_by_cosell_asset_id_request,
    build_get_product_cosell_asset_cosell_assetss_by_product_id_request,
    build_get_product_cosell_asset_get_by_instance_id_s_by_instance_id_request,
    build_get_product_cosell_listing_by_instance_id_request,
    build_get_product_cosell_listing_get_by_instance_id_s_by_instance_id_request,
    build_get_product_feature_availability_by_feature_availability_id_request,
    build_get_product_feature_availability_get_by_instance_id_s_by_instance_id_request,
    build_get_product_lead_configuration_by_product_id_request,
    build_get_product_listing_asset_assetss_by_listing_id_request,
    build_get_product_listing_asset_by_listing_id_request,
    build_get_product_listing_by_listing_id_request,
    build_get_product_listing_get_by_instance_id_s_by_instance_id_request,
    build_get_product_listing_image_by_listing_id_request,
    build_get_product_listing_image_imagess_by_listing_id_request,
    build_get_product_listing_video_by_listing_id_request,
    build_get_product_listing_video_videoss_by_listing_id_request,
    build_get_product_package_by_package_id_request,
    build_get_product_package_configuration_by_package_configuration_id_request,
    build_get_product_package_configuration_get_by_instance_id_s_by_instance_id_request,
    build_get_product_package_packagess_by_product_id_request,
    build_get_product_productss_request,
    build_get_product_property_by_property_id_request,
    build_get_product_property_get_by_instance_id_s_by_instance_id_request,
    build_get_product_property_propertiess_by_product_id_request,
    build_get_product_reseller_configuration_by_product_id_request,
    build_get_product_setup_by_product_id_request,
    build_get_product_submission_by_submission_id_request,
    build_get_product_submission_reportss_by_submission_id_request,
    build_get_product_submission_submissionss_by_product_id_request,
    build_get_product_submission_validations_by_submission_id_request,
    build_get_product_submission_workflowdetails_by_submission_id_request,
    build_get_product_supplemental_content_by_instance_id_request,
    build_get_product_supplemental_content_get_by_instance_id_s_by_instance_id_request,
    build_get_product_variant_by_variant_id_request,
    build_get_product_variant_variantss_by_product_id_request,
    build_post_product_availability_productavailabilities_by_product_id_request,
    build_post_product_cosell_asset_cosell_assets_by_product_id_request,
    build_post_product_lead_configuration_by_product_id_request,
    build_post_product_listing_asset_assets_by_listing_id_request,
    build_post_product_listing_create_with_instance_id_by_instance_id_request,
    build_post_product_listing_image_images_by_listing_id_request,
    build_post_product_listing_video_videos_by_listing_id_request,
    build_post_product_package_packages_by_product_id_request,
    build_post_product_products_request,
    build_post_product_property_properties_by_product_id_request,
    build_post_product_reseller_configuration_by_product_id_request,
    build_post_product_setup_by_product_id_request,
    build_post_product_submission_promote_by_submission_id_request,
    build_post_product_submission_submissions_by_product_id_request,
    build_post_product_supplemental_content_commit_by_instance_id_request,
    build_post_product_variant_variants_by_product_id_request,
    build_put_product_availability_request,
    build_put_product_cosell_asset_by_cosell_asset_id_request,
    build_put_product_cosell_listing_by_instance_id_request,
    build_put_product_feature_availability_by_feature_availability_id_request,
    build_put_product_listing_asset_by_listing_id_request,
    build_put_product_listing_by_listing_id_request,
    build_put_product_listing_image_by_listing_id_request,
    build_put_product_listing_video_by_listing_id_request,
    build_put_product_package_by_package_id_request,
    build_put_product_package_configuration_by_package_configuration_id_request,
    build_put_product_property_by_property_id_request,
    build_put_product_supplemental_content_by_instance_id_request,
    build_put_product_variant_by_variant_id_request,
)
from .._vendor import MixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class HttpsApiPartnerMicrosoftComV10IngestionOperationsMixin(MixinABC):  # pylint: disable=too-many-public-methods
    @distributed_trace_async
    async def get_product_productss(
        self, *, filter: Optional[str] = None, skip_token: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns collection of products.

        Sample requests:

        .. code-block::

           GET /products?$filter=ResourceType eq 'Application' or ResourceType eq 'SoftwareAsAService'
           GET /products?$filter=ExternalIDs/Any(i:i/Type eq 'StoreID' and i/Value eq '{storeID}')
           GET /products?$filter=ExternalIDs/Any(i:i/Type eq 'ExternalAzureProductID' and i/Value eq
        '{externalAzureProductID}').

        :keyword filter: Filter for paged collection. Filter by ResourceType or ExternalIDs with
         operation eq is allowed. Default value is None.
        :paramtype filter: str
        :keyword skip_token: Skip token for paged collection. Default value is None.
        :paramtype skip_token: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "ID": "str",  # Optional.
                            "externalIds": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "isModularPublishing": bool,  # Optional.
                            "name": "str",  # Optional.
                            "offerMarketingUrlIDentifier": "str",  # Optional.
                            "resourceType": "str"  # Optional. Known values are:
                              "AzureApplication", "AzureDeveloperService",
                              "AzureThirdPartyVirtualMachine", "AzureContainer",
                              "AzureVisualStudioExtension", "AzureDynamics365ForCustomerEngagement",
                              "AzureDynamics365ForOperations", and "AzureDynamics365BusinessCentral".
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_productss_request(
            authorization=self._config.authorization,
            filter=filter,
            skip_token=skip_token,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_products(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a Product.

        Sample requests:

        .. code-block::

           POST /product
                        {
                            "resourceType": "AzureThirdPartyVirtualMachine",
                            "name": "testVm",
                            "externalIDs" : [
                             {
                                "type": "AzureOfferID",
                                "value" : "testOfferID",
                             }]
                        }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Products.BaseProduct. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "ID": "str",  # Optional.
                    "externalIds": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "isModularPublishing": bool,  # Optional.
                    "name": "str",  # Optional.
                    "offerMarketingUrlIDentifier": "str",  # Optional.
                    "resourceType": "str"  # Optional. Known values are: "AzureApplication",
                      "AzureDeveloperService", "AzureThirdPartyVirtualMachine", "AzureContainer",
                      "AzureVisualStudioExtension", "AzureDynamics365ForCustomerEngagement",
                      "AzureDynamics365ForOperations", and "AzureDynamics365BusinessCentral".
                }

                # response body for status code(s): 201
                response == {
                    "ID": "str",  # Optional.
                    "externalIds": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "isModularPublishing": bool,  # Optional.
                    "name": "str",  # Optional.
                    "offerMarketingUrlIDentifier": "str",  # Optional.
                    "resourceType": "str"  # Optional. Known values are: "AzureApplication",
                      "AzureDeveloperService", "AzureThirdPartyVirtualMachine", "AzureContainer",
                      "AzureVisualStudioExtension", "AzureDynamics365ForCustomerEngagement",
                      "AzureDynamics365ForOperations", and "AzureDynamics365BusinessCentral".
                }
        """

    @overload
    async def post_product_products(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a Product.

        Sample requests:

        .. code-block::

           POST /product
                        {
                            "resourceType": "AzureThirdPartyVirtualMachine",
                            "name": "testVm",
                            "externalIDs" : [
                             {
                                "type": "AzureOfferID",
                                "value" : "testOfferID",
                             }]
                        }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Products.BaseProduct. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "ID": "str",  # Optional.
                    "externalIds": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "isModularPublishing": bool,  # Optional.
                    "name": "str",  # Optional.
                    "offerMarketingUrlIDentifier": "str",  # Optional.
                    "resourceType": "str"  # Optional. Known values are: "AzureApplication",
                      "AzureDeveloperService", "AzureThirdPartyVirtualMachine", "AzureContainer",
                      "AzureVisualStudioExtension", "AzureDynamics365ForCustomerEngagement",
                      "AzureDynamics365ForOperations", and "AzureDynamics365BusinessCentral".
                }
        """

    @distributed_trace_async
    async def post_product_products(self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any) -> Union[JSON, str]:
        """Creates a Product.

        Sample requests:

        .. code-block::

           POST /product
                        {
                            "resourceType": "AzureThirdPartyVirtualMachine",
                            "name": "testVm",
                            "externalIDs" : [
                             {
                                "type": "AzureOfferID",
                                "value" : "testOfferID",
                             }]
                        }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Products.BaseProduct. Is either a
         model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "ID": "str",  # Optional.
                    "externalIds": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "isModularPublishing": bool,  # Optional.
                    "name": "str",  # Optional.
                    "offerMarketingUrlIDentifier": "str",  # Optional.
                    "resourceType": "str"  # Optional. Known values are: "AzureApplication",
                      "AzureDeveloperService", "AzureThirdPartyVirtualMachine", "AzureContainer",
                      "AzureVisualStudioExtension", "AzureDynamics365ForCustomerEngagement",
                      "AzureDynamics365ForOperations", and "AzureDynamics365BusinessCentral".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_products_request(
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a product.

        Sample requests:

        .. code-block::

           GET /products/{productID}.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ID": "str",  # Optional.
                    "externalIds": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "isModularPublishing": bool,  # Optional.
                    "name": "str",  # Optional.
                    "offerMarketingUrlIDentifier": "str",  # Optional.
                    "resourceType": "str"  # Optional. Known values are: "AzureApplication",
                      "AzureDeveloperService", "AzureThirdPartyVirtualMachine", "AzureContainer",
                      "AzureVisualStudioExtension", "AzureDynamics365ForCustomerEngagement",
                      "AzureDynamics365ForOperations", and "AzureDynamics365BusinessCentral".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_by_product_id(self, **kwargs: Any) -> str:
        """Deletes a product.

        Sample requests:

        .. code-block::

           DELETE /products/{productID}.

        :return: str
        :rtype: str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[str]

        request = build_delete_product_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 204:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(str, deserialized), {})

        return cast(str, deserialized)

    @distributed_trace_async
    async def get_product_setup_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns ProductSetup of a Product.

        Sample requests:

        .. code-block::

           GET /products/{productID}/setup.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "callToAction": "str",  # Optional. Known values are: "free", "free-trial",
                      and "contact-me".
                    "channelStates": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "enableTestDrive": bool,  # Optional.
                    "resourceType": "str",  # Optional. "AzureProductSetup"
                    "sellingOption": "str",  # Optional. Known values are: "ListingOnly" and
                      "ListAndSell".
                    "testDriveType": "str",  # Optional.
                    "trialUri": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_setup_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_setup_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ProductSetup [AzureProductSetup is allowed].

        Sample requests:

        .. code-block::

           POST /product/{productID}/setup
           {
               "resourceType": "AzureProductSetup",
               "leadGenID": "testLeadGenID"
           }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Products.BaseProductSetup.
         Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "callToAction": "str",  # Optional. Known values are: "free", "free-trial",
                      and "contact-me".
                    "channelStates": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "enableTestDrive": bool,  # Optional.
                    "resourceType": "str",  # Optional. "AzureProductSetup"
                    "sellingOption": "str",  # Optional. Known values are: "ListingOnly" and
                      "ListAndSell".
                    "testDriveType": "str",  # Optional.
                    "trialUri": "str"  # Optional.
                }

                # response body for status code(s): 201
                response == {
                    "callToAction": "str",  # Optional. Known values are: "free", "free-trial",
                      and "contact-me".
                    "channelStates": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "enableTestDrive": bool,  # Optional.
                    "resourceType": "str",  # Optional. "AzureProductSetup"
                    "sellingOption": "str",  # Optional. Known values are: "ListingOnly" and
                      "ListAndSell".
                    "testDriveType": "str",  # Optional.
                    "trialUri": "str"  # Optional.
                }
        """

    @overload
    async def post_product_setup_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ProductSetup [AzureProductSetup is allowed].

        Sample requests:

        .. code-block::

           POST /product/{productID}/setup
           {
               "resourceType": "AzureProductSetup",
               "leadGenID": "testLeadGenID"
           }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Products.BaseProductSetup.
         Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "callToAction": "str",  # Optional. Known values are: "free", "free-trial",
                      and "contact-me".
                    "channelStates": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "enableTestDrive": bool,  # Optional.
                    "resourceType": "str",  # Optional. "AzureProductSetup"
                    "sellingOption": "str",  # Optional. Known values are: "ListingOnly" and
                      "ListAndSell".
                    "testDriveType": "str",  # Optional.
                    "trialUri": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def post_product_setup_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ProductSetup [AzureProductSetup is allowed].

        Sample requests:

        .. code-block::

           POST /product/{productID}/setup
           {
               "resourceType": "AzureProductSetup",
               "leadGenID": "testLeadGenID"
           }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Products.BaseProductSetup. Is
         either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "callToAction": "str",  # Optional. Known values are: "free", "free-trial",
                      and "contact-me".
                    "channelStates": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "enableTestDrive": bool,  # Optional.
                    "resourceType": "str",  # Optional. "AzureProductSetup"
                    "sellingOption": "str",  # Optional. Known values are: "ListingOnly" and
                      "ListAndSell".
                    "testDriveType": "str",  # Optional.
                    "trialUri": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_setup_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_branches_get_by_module_s_by_module(self, module: str, **kwargs: Any) -> Union[JSON, str]:
        """Returns a paged collection of Branch.

        Sample request:
                         GET /products/{productID}/branches/getByModule(module=Listing)
                             =&gt; returns all branches of Listing module.

        :param module: Module. Possible values: Listing, Package, Property, Availability. Required.
        :type module: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "ID": "str",  # Optional.
                            "currentDraftInstanceID": "str",  # Optional.
                            "friendlyName": "str",  # Optional.
                            "module": "str",  # Optional. Known values are: "Listing",
                              "Property", "Package", "Availability", "SupplementalContent", and
                              "Cosell".
                            "resourceType": "str",  # Optional. "Branch"
                            "type": "str",  # Optional. Known values are: "Main" and
                              "Private".
                            "variantID": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_branches_get_by_module_s_by_module_request(
            module=module,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_availability_productavailabilitiess_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a paged collection of ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           GET /products/{productID}/productAvailabilities.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "emailAudiences": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "enterpriseLicensing": "str",  # Optional.
                            "hideKeyAudience": "str",  # Optional.
                            "resourceType": "str",  # Optional. "ProductAvailability"
                            "subscriptionAudiences": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "visibility": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_availability_productavailabilitiess_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_availability_productavailabilities_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           POST /products/{productID}/productAvailabilities.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.ProductAvailability. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }
        """

    @overload
    async def post_product_availability_productavailabilities_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           POST /products/{productID}/productAvailabilities.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.ProductAvailability. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def post_product_availability_productavailabilities_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Create ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           POST /products/{productID}/productAvailabilities.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.ProductAvailability. Is either a model type or a
         IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_availability_productavailabilities_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_availability(self, product_availability_id: str, **kwargs: Any) -> Union[JSON, str]:
        """Returns ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           GET /products/{productID}/productAvailabilities/{productAvailabilityID}.

        :param product_availability_id: ID of ProductAvailability. Required.
        :type product_availability_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_availability_request(
            product_availability_id=product_availability_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_availability(
        self,
        product_availability_id: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[JSON, str]:
        """Update ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           PUT /products/{productID}/productAvailabilities/{productAvailabilityID}.

        :param product_availability_id: ID of ProductAvailability. Required.
        :type product_availability_id: str
        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.ProductAvailability. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }
        """

    @overload
    async def put_product_availability(
        self,
        product_availability_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[JSON, str]:
        """Update ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           PUT /products/{productID}/productAvailabilities/{productAvailabilityID}.

        :param product_availability_id: ID of ProductAvailability. Required.
        :type product_availability_id: str
        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.ProductAvailability. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def put_product_availability(
        self, product_availability_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Update ProductAvailability resource for Product.

        Sample request:

        .. code-block::

           PUT /products/{productID}/productAvailabilities/{productAvailabilityID}.

        :param product_availability_id: ID of ProductAvailability. Required.
        :type product_availability_id: str
        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.ProductAvailability. Is either a model type or a
         IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "emailAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "enterpriseLicensing": "str",  # Optional.
                    "hideKeyAudience": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ProductAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "visibility": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_availability_request(
            product_availability_id=product_availability_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_availability_get_by_instance_id_s_by_instance_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a paged collection of ProductAvailability resource for Product.

        Sample request:
                         GET
        /products/{productID}/productAvailabilities/getByInstanceID(instanceID={instanceID}).

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "emailAudiences": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "enterpriseLicensing": "str",  # Optional.
                            "hideKeyAudience": "str",  # Optional.
                            "resourceType": "str",  # Optional. "ProductAvailability"
                            "subscriptionAudiences": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "visibility": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_availability_get_by_instance_id_s_by_instance_id_request(
            product_id=self._config.product_id,
            instance_id=self._config.instance_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_property_propertiess_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a paged collection of Property resources for a Product.

        Sample request:

        .. code-block::

           GET /products/{productID}/properties.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "additionalCategories": [
                                "str"  # Optional.
                            ],
                            "appVersion": "str",  # Optional.
                            "categories": [
                                "str"  # Optional.
                            ],
                            "customAmendments": [
                                {
                                    "name": "str",  # Optional.
                                    "tenants": [
                                        {
                                            "ID": "str",  # Optional.
                                            "description": "str"  #
                                              Optional.
                                        }
                                    ],
                                    "terms": "str"  # Optional.
                                }
                            ],
                            "globalAmendmentTerms": "str",  # Optional.
                            "hideKeys": [
                                "str"  # Optional.
                            ],
                            "industries": [
                                "str"  # Optional.
                            ],
                            "marketingOnlyChange": bool,  # Optional.
                            "productTags": [
                                "str"  # Optional.
                            ],
                            "resourceType": "str",  # Optional. "AzureProperty"
                            "submissionVersion": "str",  # Optional.
                            "termsOfUse": "str",  # Optional.
                            "useEnterpriseContract": bool  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_property_propertiess_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_property_properties_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a Property resource for a Product.

        Sample request:

        .. code-block::

           POST /products/{productID}/properties [Body Property].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Properties.BaseProperty. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }
        """

    @overload
    async def post_product_property_properties_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a Property resource for a Product.

        Sample request:

        .. code-block::

           POST /products/{productID}/properties [Body Property].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Properties.BaseProperty. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }
        """

    @distributed_trace_async
    async def post_product_property_properties_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a Property resource for a Product.

        Sample request:

        .. code-block::

           POST /products/{productID}/properties [Body Property].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Properties.BaseProperty. Is
         either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_property_properties_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_property_by_property_id(self, property_id: str, **kwargs: Any) -> Union[JSON, str]:
        """Returns a Property resource for a Product.

        Sample request:

        .. code-block::

           GET /products/{productID}/properties/{propertyID}.

        :param property_id: ID of Property. Required.
        :type property_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_property_by_property_id_request(
            property_id=property_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_property_by_property_id(
        self, property_id: str, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Update the Property resource for a Product.

        Sample request:

        .. code-block::

           PUT /products/{productID}/properties/{propertyID} [Body Property].

        :param property_id: ID of Property. Required.
        :type property_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Properties.BaseProperty. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }
        """

    @overload
    async def put_product_property_by_property_id(
        self, property_id: str, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Update the Property resource for a Product.

        Sample request:

        .. code-block::

           PUT /products/{productID}/properties/{propertyID} [Body Property].

        :param property_id: ID of Property. Required.
        :type property_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Properties.BaseProperty. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }
        """

    @distributed_trace_async
    async def put_product_property_by_property_id(
        self, property_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Update the Property resource for a Product.

        Sample request:

        .. code-block::

           PUT /products/{productID}/properties/{propertyID} [Body Property].

        :param property_id: ID of Property. Required.
        :type property_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Properties.BaseProperty. Is
         either a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "additionalCategories": [
                        "str"  # Optional.
                    ],
                    "appVersion": "str",  # Optional.
                    "categories": [
                        "str"  # Optional.
                    ],
                    "customAmendments": [
                        {
                            "name": "str",  # Optional.
                            "tenants": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "terms": "str"  # Optional.
                        }
                    ],
                    "globalAmendmentTerms": "str",  # Optional.
                    "hideKeys": [
                        "str"  # Optional.
                    ],
                    "industries": [
                        "str"  # Optional.
                    ],
                    "marketingOnlyChange": bool,  # Optional.
                    "productTags": [
                        "str"  # Optional.
                    ],
                    "resourceType": "str",  # Optional. "AzureProperty"
                    "submissionVersion": "str",  # Optional.
                    "termsOfUse": "str",  # Optional.
                    "useEnterpriseContract": bool  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_property_by_property_id_request(
            property_id=property_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_property_get_by_instance_id_s_by_instance_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a paged collection of Property resources for a Product.

        Sample request:
                         GET /products/{productID}/properties/getByInstanceID(instanceID={instanceID}).

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "additionalCategories": [
                                "str"  # Optional.
                            ],
                            "appVersion": "str",  # Optional.
                            "categories": [
                                "str"  # Optional.
                            ],
                            "customAmendments": [
                                {
                                    "name": "str",  # Optional.
                                    "tenants": [
                                        {
                                            "ID": "str",  # Optional.
                                            "description": "str"  #
                                              Optional.
                                        }
                                    ],
                                    "terms": "str"  # Optional.
                                }
                            ],
                            "globalAmendmentTerms": "str",  # Optional.
                            "hideKeys": [
                                "str"  # Optional.
                            ],
                            "industries": [
                                "str"  # Optional.
                            ],
                            "marketingOnlyChange": bool,  # Optional.
                            "productTags": [
                                "str"  # Optional.
                            ],
                            "resourceType": "str",  # Optional. "AzureProperty"
                            "submissionVersion": "str",  # Optional.
                            "termsOfUse": "str",  # Optional.
                            "useEnterpriseContract": bool  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_property_get_by_instance_id_s_by_instance_id_request(
            product_id=self._config.product_id,
            instance_id=self._config.instance_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_listing_by_listing_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns Listing resource.

        Sample request:
                         GET /products/{productID}/listings/{listingID}.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_listing_by_listing_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates Listing resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID [Body Listing].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.BaseListing. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }
        """

    @overload
    async def put_product_listing_by_listing_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates Listing resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID [Body Listing].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.BaseListing. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def put_product_listing_by_listing_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates Listing resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID [Body Listing].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.BaseListing. Is either a
         model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_listing_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_listing_by_listing_id(self, **kwargs: Any) -> Optional[str]:
        """Deletes Listing resource.

        Sample request:

        .. code-block::

           DELETE /products/{productID}/listings/{listingID}.

        :return: str or None
        :rtype: str or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[str]]

        request = build_delete_product_listing_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_product_listing_asset_assetss_by_listing_id(
        self, *, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of ListingAsset resources.

        Sample request:

        .. code-block::

           GET /products/{productID}/listings/{listingID}/assets

             =&gt; returns all ListingAsset resources for a given listingID.

        :keyword expand: Use $expand=FileSasUri to Include SAS URI in response. Default value is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "description": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "friendlyName": "str",  # Optional.
                            "publisherDefinedSasUri": "str",  # Optional.
                            "resourceType": "str",  # Optional. "ListingAsset"
                            "state": "str",  # Optional. Known values are:
                              "PendingUpload", "Uploaded", "InProcessing", "Processed", and
                              "ProcessFailed".
                            "type": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_asset_assetss_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_listing_asset_assets_by_listing_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingAsset resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/assets/{assetID} [Body ListingAsset].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingAsset. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @overload
    async def post_product_listing_asset_assets_by_listing_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingAsset resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/assets/{assetID} [Body ListingAsset].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingAsset. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def post_product_listing_asset_assets_by_listing_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingAsset resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/assets/{assetID} [Body ListingAsset].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingAsset. Is either
         a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_listing_asset_assets_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_listing_asset_by_listing_id(
        self, *, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a ListingAsset resource.

        Sample request:

        .. code-block::

           GET /products/{productID}/listings/{listingID}/assets/{assetID}.

        :keyword expand: Use $expand=FileSasUri to Include SAS URI in response. Default value is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_asset_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            asset_id=self._config.asset_id,
            authorization=self._config.authorization,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_listing_asset_by_listing_id(self, **kwargs: Any) -> str:
        """Deletes a ListingAsset resource.

        Sample request:

        .. code-block::

           DELETE /products/{productID}/listings/{listingID}/assets/{assetID}.

        :return: str
        :rtype: str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[str]

        request = build_delete_product_listing_asset_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            asset_id=self._config.asset_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 204:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(str, deserialized), {})

        return cast(str, deserialized)

    @overload
    async def put_product_listing_asset_by_listing_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingImage resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/assets/{assetID} [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingAsset. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @overload
    async def put_product_listing_asset_by_listing_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingImage resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/assets/{assetID} [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingAsset. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def put_product_listing_asset_by_listing_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingImage resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/assets/{assetID} [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingAsset. Is either
         a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "friendlyName": "str",  # Optional.
                    "publisherDefinedSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingAsset"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_listing_asset_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            asset_id=self._config.asset_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_listing_image_imagess_by_listing_id(
        self, *, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of ListingImage resources.

        Sample request:

        .. code-block::

           GET /products/{productID}/listings/{listingID}/images

             returns all ListingImage resources for a given listing.

        :keyword expand: Use $expand=FileSasUri to Include SAS URI in response. Default value is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "description": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "order": 0,  # Optional.
                            "resourceType": "str",  # Optional. "ListingImage"
                            "state": "str",  # Optional. Known values are:
                              "PendingUpload", "Uploaded", "InProcessing", "Processed", and
                              "ProcessFailed".
                            "type": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_image_imagess_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_listing_image_images_by_listing_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingImage resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/images [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingImage. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @overload
    async def post_product_listing_image_images_by_listing_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingImage resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/images [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingImage. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def post_product_listing_image_images_by_listing_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingImage resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/images [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingImage. Is either
         a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_listing_image_images_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_listing_image_by_listing_id(
        self, *, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a ListingImage resource.

        Sample request:

        .. code-block::

           GET /products/{productID}/listings/{listingID}/images/{imageID}.

        :keyword expand: Use $expand=FileSasUri to Include SAS URI in response. Default value is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_image_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            image_id=self._config.image_id,
            authorization=self._config.authorization,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_listing_image_by_listing_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingImage resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/images/{imageID} [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingImage. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @overload
    async def put_product_listing_image_by_listing_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingImage resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/images/{imageID} [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingImage. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def put_product_listing_image_by_listing_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingImage resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/images/{imageID} [Body ListingImage].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingImage. Is either
         a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "description": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "order": 0,  # Optional.
                    "resourceType": "str",  # Optional. "ListingImage"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_listing_image_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            image_id=self._config.image_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_listing_image_by_listing_id(self, **kwargs: Any) -> str:
        """Deletes a ListingImage resource.

        Sample request:

        .. code-block::

           DELETE /products/{productID}/listings/{listingID}/images/{imageID}.

        :return: str
        :rtype: str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[str]

        request = build_delete_product_listing_image_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            image_id=self._config.image_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 204:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(str, deserialized), {})

        return cast(str, deserialized)

    @distributed_trace_async
    async def get_product_listing_video_videoss_by_listing_id(
        self, *, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of ListingVideo resources.

        Sample request:

        .. code-block::

           GET /products/{productID}/listings/{listingID}/videos

             =&gt; returns ListingVideo resources for a given language.

        :keyword expand: Use $expand=FileSasUri to Include SAS URI in response. Default value is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "resourceType": "str",  # Optional. "ListingVideo"
                            "state": "str",  # Optional. Known values are:
                              "PendingUpload", "Uploaded", "InProcessing", "Processed", and
                              "ProcessFailed".
                            "streamingUri": "str",  # Optional.
                            "thumbnail": {
                                "description": "str",  # Optional.
                                "fileName": "str",  # Optional.
                                "fileSasUri": "str",  # Optional.
                                "publisherDefinedSasUri": "str",  # Optional.
                                "state": "str",  # Optional. Known values are:
                                  "PendingUpload", "Uploaded", "InProcessing", "Processed", and
                                  "ProcessFailed".
                                "title": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_video_videoss_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_listing_video_videos_by_listing_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingVideo resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/videos   [Body ListingVideo].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingVideo. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }
        """

    @overload
    async def post_product_listing_video_videos_by_listing_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingVideo resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/videos   [Body ListingVideo].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingVideo. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }
        """

    @distributed_trace_async
    async def post_product_listing_video_videos_by_listing_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ListingVideo resource.

        Sample request:

        .. code-block::

           POST /products/{productID}/listings/{listingID}/videos   [Body ListingVideo].

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingVideo. Is either
         a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_listing_video_videos_by_listing_id_request(
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_listing_video_by_listing_id(
        self, video_id: str, *, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a ListingVideo resource.

        Sample request:

        .. code-block::

           GET /products/{productID}/listings/{listingID}/videos/{videoID}.

        :param video_id: ID of Video. Required.
        :type video_id: str
        :keyword expand: Use $expand=FileSasUri to Include SAS URI in response. Default value is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_video_by_listing_id_request(
            video_id=video_id,
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_listing_video_by_listing_id(
        self, video_id: str, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingVideo resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/videos/{videoID} [Body ListingVideo].

        :param video_id: ID of ListingVideo. Required.
        :type video_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingVideo. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }
        """

    @overload
    async def put_product_listing_video_by_listing_id(
        self, video_id: str, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingVideo resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/videos/{videoID} [Body ListingVideo].

        :param video_id: ID of ListingVideo. Required.
        :type video_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingVideo. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }
        """

    @distributed_trace_async
    async def put_product_listing_video_by_listing_id(
        self, video_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a ListingVideo resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/listings/{listingID}/videos/{videoID} [Body ListingVideo].

        :param video_id: ID of ListingVideo. Required.
        :type video_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Listings.ListingVideo. Is either
         a model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "ListingVideo"
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "streamingUri": "str",  # Optional.
                    "thumbnail": {
                        "description": "str",  # Optional.
                        "fileName": "str",  # Optional.
                        "fileSasUri": "str",  # Optional.
                        "publisherDefinedSasUri": "str",  # Optional.
                        "state": "str",  # Optional. Known values are: "PendingUpload",
                          "Uploaded", "InProcessing", "Processed", and "ProcessFailed".
                        "title": "str"  # Optional.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_listing_video_by_listing_id_request(
            video_id=video_id,
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_listing_video_by_listing_id(self, video_id: str, **kwargs: Any) -> str:
        """Deletes a ListingVideo resource.

        Sample request:

        .. code-block::

           DELETE /products/{productID}/listings/{listingID}/videos/{videoID}.

        :param video_id: ID of ListingVideo. Required.
        :type video_id: str
        :return: str
        :rtype: str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[str]

        request = build_delete_product_listing_video_by_listing_id_request(
            video_id=video_id,
            product_id=self._config.product_id,
            listing_id=self._config.listing_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 204:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(str, deserialized), {})

        return cast(str, deserialized)

    @distributed_trace_async
    async def get_product_listing_get_by_instance_id_s_by_instance_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a paged collection of Listing resources.

        Sample request:
                         GET /products/{productID}/listings/getByInstanceID(instanceID={instanceID}).

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "accessInformation": "str",  # Optional.
                            "allowOnlyManagedDiskDeployments": bool,  # Optional.
                            "compatibleProducts": [
                                "str"  # Optional.
                            ],
                            "description": "str",  # Optional.
                            "gettingStartedInstructions": "str",  # Optional.
                            "keywords": [
                                "str"  # Optional.
                            ],
                            "languageCode": "str",  # Optional.
                            "listingContacts": [
                                {
                                    "email": "str",  # Optional.
                                    "name": "str",  # Optional.
                                    "phone": "str",  # Optional.
                                    "type": "str",  # Optional. Known values are:
                                      "CustomerSupport", "Engineering", and "ChannelManager".
                                    "uri": "str"  # Optional.
                                }
                            ],
                            "listingUris": [
                                {
                                    "displayText": "str",  # Optional.
                                    "subtype": "str",  # Optional.
                                    "type": "str",  # Optional.
                                    "uri": "str"  # Optional.
                                }
                            ],
                            "productDisplayName": "str",  # Optional.
                            "publisherName": "str",  # Optional.
                            "resourceType": "str",  # Optional. "AzureListing"
                            "shortDescription": "str",  # Optional.
                            "summary": "str",  # Optional.
                            "title": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_listing_get_by_instance_id_s_by_instance_id_request(
            product_id=self._config.product_id,
            instance_id=self._config.instance_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_listing_create_with_instance_id_by_instance_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a Listing resource.

        Sample request:
                         POST
        /products/{productID}/listings/createWithInstanceID(instanceID={instanceID}) [Body Listing].

        :param body: Request body of a base Listing. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }
        """

    @overload
    async def post_product_listing_create_with_instance_id_by_instance_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a Listing resource.

        Sample request:
                         POST
        /products/{productID}/listings/createWithInstanceID(instanceID={instanceID}) [Body Listing].

        :param body: Request body of a base Listing. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def post_product_listing_create_with_instance_id_by_instance_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a Listing resource.

        Sample request:
                         POST
        /products/{productID}/listings/createWithInstanceID(instanceID={instanceID}) [Body Listing].

        :param body: Request body of a base Listing. Is either a model type or a IO type. Default value
         is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "accessInformation": "str",  # Optional.
                    "allowOnlyManagedDiskDeployments": bool,  # Optional.
                    "compatibleProducts": [
                        "str"  # Optional.
                    ],
                    "description": "str",  # Optional.
                    "gettingStartedInstructions": "str",  # Optional.
                    "keywords": [
                        "str"  # Optional.
                    ],
                    "languageCode": "str",  # Optional.
                    "listingContacts": [
                        {
                            "email": "str",  # Optional.
                            "name": "str",  # Optional.
                            "phone": "str",  # Optional.
                            "type": "str",  # Optional. Known values are:
                              "CustomerSupport", "Engineering", and "ChannelManager".
                            "uri": "str"  # Optional.
                        }
                    ],
                    "listingUris": [
                        {
                            "displayText": "str",  # Optional.
                            "subtype": "str",  # Optional.
                            "type": "str",  # Optional.
                            "uri": "str"  # Optional.
                        }
                    ],
                    "productDisplayName": "str",  # Optional.
                    "publisherName": "str",  # Optional.
                    "resourceType": "str",  # Optional. "AzureListing"
                    "shortDescription": "str",  # Optional.
                    "summary": "str",  # Optional.
                    "title": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_listing_create_with_instance_id_by_instance_id_request(
            product_id=self._config.product_id,
            instance_id=self._config.instance_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))
            response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_package_configuration_by_package_configuration_id(
        self, package_configuration_id: str, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a PackageConfiguration resource.

        Sample request:

        .. code-block::

           GET /products/{productID}/packageConfigurations/{packageConfigurationID}.

        :param package_configuration_id: PackageConfiguration ID. Required.
        :type package_configuration_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_package_configuration_by_package_configuration_id_request(
            package_configuration_id=package_configuration_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_package_configuration_by_package_configuration_id(
        self,
        package_configuration_id: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a PackageConfiguration resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/packageConfigurations/{packageConfigurationID} [Body
        PackageConfiguration].

        :param package_configuration_id: PackageConfiguration ID. Required.
        :type package_configuration_id: str
        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Packages.BasePackageConfiguration. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {}
        """

    @overload
    async def put_product_package_configuration_by_package_configuration_id(
        self,
        package_configuration_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a PackageConfiguration resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/packageConfigurations/{packageConfigurationID} [Body
        PackageConfiguration].

        :param package_configuration_id: PackageConfiguration ID. Required.
        :type package_configuration_id: str
        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Packages.BasePackageConfiguration. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_product_package_configuration_by_package_configuration_id(
        self, package_configuration_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a PackageConfiguration resource.

        Sample request:

        .. code-block::

           PUT /products/{productID}/packageConfigurations/{packageConfigurationID} [Body
        PackageConfiguration].

        :param package_configuration_id: PackageConfiguration ID. Required.
        :type package_configuration_id: str
        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Packages.BasePackageConfiguration. Is either a model type or a
         IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_package_configuration_by_package_configuration_id_request(
            package_configuration_id=package_configuration_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_package_configuration_get_by_instance_id_s_by_instance_id(
        self, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of PackageConfiguration resource.

        Sample request:
                         GET
        /products/{productID}/packageConfigurations/getByInstanceID(instanceID={instanceID}).

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_package_configuration_get_by_instance_id_s_by_instance_id_request(
            product_id=self._config.product_id,
            instance_id=self._config.instance_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_package_packagess_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a set of package instances for the product.

        Returns a set of package instances for the product.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "fileSize": 0,  # Optional.
                            "isCertified": bool,  # Optional.
                            "isEmpty": bool,  # Optional.
                            "publishTargets": [
                                {
                                    "firstPublishedDateTime": "2020-02-20
                                      00:00:00",  # Optional.
                                    "sandboxId": "str",  # Optional.
                                    "trainId": "str"  # Optional.
                                }
                            ],
                            "resourceType": "str",  # Optional. Known values are:
                              "AzureApplicationPackage",
                              "Dynamics365BusinessCentralAddOnExtensionPackage",
                              "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                              "Dynamics365BusinessCentralAddOnDependencyPackage".
                            "state": "str",  # Optional. Known values are:
                              "PendingUpload", "Uploaded", "InProcessing", "Processed", and
                              "ProcessFailed".
                            "validationItems": [
                                {
                                    "errorCode": "str",  # Optional.
                                    "message": "str",  # Optional.
                                    "resource": "str",  # Optional.
                                    "severity": "str"  # Optional.
                                }
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_package_packagess_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_package_packages_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a package resource.

        Sample request:

        .. code-block::

           POST products/{productID}/packages
           {
               "resourceType": "package",
               "fileName": "sample.appx"
           }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Packages.BasePackage. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """

    @overload
    async def post_product_package_packages_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a package resource.

        Sample request:

        .. code-block::

           POST products/{productID}/packages
           {
               "resourceType": "package",
               "fileName": "sample.appx"
           }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Packages.BasePackage. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def post_product_package_packages_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a package resource.

        Sample request:

        .. code-block::

           POST products/{productID}/packages
           {
               "resourceType": "package",
               "fileName": "sample.appx"
           }.

        :param body: Request body of a Microsoft.Ingestion.Api.Models.Packages.BasePackage. Is either a
         model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_package_packages_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_package_by_package_id(self, package_id: str, **kwargs: Any) -> Union[JSON, str]:
        """Returns a package instance for the product.

        Returns a package instance for the product.

        :param package_id: Required.
        :type package_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_package_by_package_id_request(
            package_id=package_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_package_by_package_id(
        self, package_id: str, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Update the package.

        Update the package.

        :param package_id: The ID of package. Required.
        :type package_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Packages.BasePackage. Default
         value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """

    @overload
    async def put_product_package_by_package_id(
        self, package_id: str, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Update the package.

        Update the package.

        :param package_id: The ID of package. Required.
        :type package_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Packages.BasePackage. Default
         value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def put_product_package_by_package_id(
        self, package_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Update the package.

        Update the package.

        :param package_id: The ID of package. Required.
        :type package_id: str
        :param body: Request body of a Microsoft.Ingestion.Api.Models.Packages.BasePackage. Is either a
         model type or a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "fileSize": 0,  # Optional.
                    "isCertified": bool,  # Optional.
                    "isEmpty": bool,  # Optional.
                    "publishTargets": [
                        {
                            "firstPublishedDateTime": "2020-02-20 00:00:00",  # Optional.
                            "sandboxId": "str",  # Optional.
                            "trainId": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. Known values are:
                      "AzureApplicationPackage", "Dynamics365BusinessCentralAddOnExtensionPackage",
                      "Dynamics365BusinessCentralAddOnLibraryExtensionPackage", and
                      "Dynamics365BusinessCentralAddOnDependencyPackage".
                    "state": "str",  # Optional. Known values are: "PendingUpload", "Uploaded",
                      "InProcessing", "Processed", and "ProcessFailed".
                    "validationItems": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_package_by_package_id_request(
            package_id=package_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_package_by_package_id(self, package_id: str, **kwargs: Any) -> str:
        """Delete the package.

        Delete the package.

        :param package_id: the ID of package. Required.
        :type package_id: str
        :return: str
        :rtype: str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[str]

        request = build_delete_product_package_by_package_id_request(
            package_id=package_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 204:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(str, deserialized), {})

        return cast(str, deserialized)

    @distributed_trace_async
    async def get_product_variant_variantss_by_product_id(
        self, *, skip_token: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a set of variants for the product.

        Returns a set of variants for the product.

        :keyword skip_token: Skip token for paged collection. Default value is None.
        :paramtype skip_token: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {}
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_variant_variantss_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            skip_token=skip_token,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_variant_variants_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a variant resource.

        Sample request:
                         POST products/{productID}/variants
                         {
                             "resourceType": "AzureSkuVariant",
                             ...
                         }.

        :param body: Request body of a Base Variant. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {}
        """

    @overload
    async def post_product_variant_variants_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a variant resource.

        Sample request:
                         POST products/{productID}/variants
                         {
                             "resourceType": "AzureSkuVariant",
                             ...
                         }.

        :param body: Request body of a Base Variant. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_product_variant_variants_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a variant resource.

        Sample request:
                         POST products/{productID}/variants
                         {
                             "resourceType": "AzureSkuVariant",
                             ...
                         }.

        :param body: Request body of a Base Variant. Is either a model type or a IO type. Default value
         is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_variant_variants_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))
            response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_variant_by_variant_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a variant for the product.

        Returns a variant for the product.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_variant_by_variant_id_request(
            product_id=self._config.product_id,
            variant_id=self._config.variant_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))
            response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_variant_by_variant_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Update the variant.

        Update the variant.

        :param body: Request body of a type of base variant. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {}
        """

    @overload
    async def put_product_variant_by_variant_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Update the variant.

        Update the variant.

        :param body: Request body of a type of base variant. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_product_variant_by_variant_id(self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any) -> JSON:
        """Update the variant.

        Update the variant.

        :param body: Request body of a type of base variant. Is either a model type or a IO type.
         Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_variant_by_variant_id_request(
            product_id=self._config.product_id,
            variant_id=self._config.variant_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def delete_product_variant_by_variant_id(self, **kwargs: Any) -> Optional[str]:
        """Delete the variant.

        Delete the variant.

        :return: str or None
        :rtype: str or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[str]]

        request = build_delete_product_variant_by_variant_id_request(
            product_id=self._config.product_id,
            variant_id=self._config.variant_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 204:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def get_product_feature_availability_get_by_instance_id_s_by_instance_id(
        self, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of feature availability resource.

        Sample request:
                         GET
        /products/{productID}/featureAvailabilities/getByInstanceID(instanceID={instanceID})
                         GET
        /products/{productID}/featureAvailabilities/getByInstanceID(instanceID={instanceID})&amp;$expand=MarketStates,PriceSchedule,Trial.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "customMeters": [
                                {
                                    "ID": "str",  # Optional.
                                    "displayName": "str",  # Optional.
                                    "includedBaseQuantities": [
                                        {
                                            "isInfinite": bool,  #
                                              Optional.
                                            "quantity": 0.0,  # Optional.
                                            "recurringUnit": "str"  #
                                              Optional.
                                        }
                                    ],
                                    "isEnabled": bool,  # Optional.
                                    "priceInUsd": 0.0,  # Optional.
                                    "uniqueID": "str",  # Optional.
                                    "unitOfMeasure": "str"  # Optional.
                                }
                            ],
                            "isHidden": bool,  # Optional.
                            "marketStates": [
                                {
                                    "marketCode": "str",  # Optional. ISO Country
                                      Code.
                                    "state": "str"  # Optional. Known values are:
                                      "Disabled", "Enabled", "StopSelling", and "Terminated".
                                }
                            ],
                            "priceSchedules": [
                                {
                                    "friendlyName": "str",  # Optional.
                                    "isBaseSchedule": bool,  # Optional.
                                    "marketCodes": [
                                        "str"  # Optional. ISO country code.
                                    ],
                                    "schedules": [
                                        {
                                            "dateTimeRange": {
                                                "endAt": {
                "dateTimeInUtc": "2020-02-20 00:00:00",  #
                                                      Optional.
                "localizePerMarket": bool  # Optional.
                                                },
                                                "startAt": {
                "dateTimeInUtc": "2020-02-20 00:00:00",  #
                                                      Optional.
                "localizePerMarket": bool  # Optional.
                                                }
                                            },
                                            "priceCadence": {
                                                "type": "str",  #
                                                  Optional. Known values are: "Month" and "Year".
                                                "value": 0  #
                                                  Optional.
                                            },
                                            "pricingModel": "str",  #
                                              Optional. Known values are: "Flat", "Recurring", and
                                              "Usage".
                                            "pricingUnits": [
                                                {
                "isUnlimitedUnit": bool,  # Optional.
                                                    "lowerUnit":
                                                      0,  # Optional.
                                                    "name":
                                                      "str",  # Optional. Known values are:
                                                      "sharedcore" and "transactions".
                                                    "unitType":
                                                      "str",  # Optional.
                                                    "upperUnit":
                                                      0  # Optional.
                                                }
                                            ],
                                            "retailPrice": {
                                                "currencyCode":
                                                  "str",  # Optional.
                                                "openPrice": 0.0,  #
                                                  Optional.
                                                "priceTierID": "str"
                                                  # Optional.
                                            }
                                        }
                                    ]
                                }
                            ],
                            "properties": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "resourceType": "str",  # Optional. "FeatureAvailability"
                            "subscriptionAudiences": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "tenantAudiences": [
                                {
                                    "ID": "str",  # Optional.
                                    "description": "str"  # Optional.
                                }
                            ],
                            "trial": {
                                "dateTimeRange": {
                                    "endAt": {
                                        "dateTimeInUtc": "2020-02-20
                                          00:00:00",  # Optional.
                                        "localizePerMarket": bool  #
                                          Optional.
                                    },
                                    "startAt": {
                                        "dateTimeInUtc": "2020-02-20
                                          00:00:00",  # Optional.
                                        "localizePerMarket": bool  #
                                          Optional.
                                    }
                                },
                                "duration": 0,  # Optional.
                                "durationType": "str",  # Optional. Known values are:
                                  "Minute", "Days", and "Months".
                                "type": "str"  # Optional. Known values are:
                                  "NoTrial", "TimedAccess", "TimedUsage", and "Unlimited".
                            },
                            "visibility": "str"  # Optional. Known values are: "Public"
                              and "Private".
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_feature_availability_get_by_instance_id_s_by_instance_id_request(
            product_id=self._config.product_id,
            instance_id=self._config.instance_id,
            authorization=self._config.authorization,
            expand=self._config.expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_feature_availability_by_feature_availability_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a feature availability.

        Sample request:
                         GET products/{productID}/featureavailabilities/{featureAvailabilityID}.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "customMeters": [
                        {
                            "ID": "str",  # Optional.
                            "displayName": "str",  # Optional.
                            "includedBaseQuantities": [
                                {
                                    "isInfinite": bool,  # Optional.
                                    "quantity": 0.0,  # Optional.
                                    "recurringUnit": "str"  # Optional.
                                }
                            ],
                            "isEnabled": bool,  # Optional.
                            "priceInUsd": 0.0,  # Optional.
                            "uniqueID": "str",  # Optional.
                            "unitOfMeasure": "str"  # Optional.
                        }
                    ],
                    "isHidden": bool,  # Optional.
                    "marketStates": [
                        {
                            "marketCode": "str",  # Optional. ISO Country Code.
                            "state": "str"  # Optional. Known values are: "Disabled",
                              "Enabled", "StopSelling", and "Terminated".
                        }
                    ],
                    "priceSchedules": [
                        {
                            "friendlyName": "str",  # Optional.
                            "isBaseSchedule": bool,  # Optional.
                            "marketCodes": [
                                "str"  # Optional. ISO country code.
                            ],
                            "schedules": [
                                {
                                    "dateTimeRange": {
                                        "endAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        },
                                        "startAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        }
                                    },
                                    "priceCadence": {
                                        "type": "str",  # Optional. Known
                                          values are: "Month" and "Year".
                                        "value": 0  # Optional.
                                    },
                                    "pricingModel": "str",  # Optional. Known
                                      values are: "Flat", "Recurring", and "Usage".
                                    "pricingUnits": [
                                        {
                                            "isUnlimitedUnit": bool,  #
                                              Optional.
                                            "lowerUnit": 0,  # Optional.
                                            "name": "str",  # Optional.
                                              Known values are: "sharedcore" and "transactions".
                                            "unitType": "str",  #
                                              Optional.
                                            "upperUnit": 0  # Optional.
                                        }
                                    ],
                                    "retailPrice": {
                                        "currencyCode": "str",  # Optional.
                                        "openPrice": 0.0,  # Optional.
                                        "priceTierID": "str"  # Optional.
                                    }
                                }
                            ]
                        }
                    ],
                    "properties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "FeatureAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "tenantAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "trial": {
                        "dateTimeRange": {
                            "endAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            },
                            "startAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            }
                        },
                        "duration": 0,  # Optional.
                        "durationType": "str",  # Optional. Known values are: "Minute",
                          "Days", and "Months".
                        "type": "str"  # Optional. Known values are: "NoTrial",
                          "TimedAccess", "TimedUsage", and "Unlimited".
                    },
                    "visibility": "str"  # Optional. Known values are: "Public" and "Private".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_feature_availability_by_feature_availability_id_request(
            product_id=self._config.product_id,
            feature_availability_id=self._config.feature_availability_id,
            authorization=self._config.authorization,
            expand=self._config.expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_feature_availability_by_feature_availability_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Update a feature availability resouce.

        Sample request:
                         PUT products/{productID}/featureavailabilities/{featureavailabilityID}
                         {
                             ...
                         }.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.FeatureAvailability. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "customMeters": [
                        {
                            "ID": "str",  # Optional.
                            "displayName": "str",  # Optional.
                            "includedBaseQuantities": [
                                {
                                    "isInfinite": bool,  # Optional.
                                    "quantity": 0.0,  # Optional.
                                    "recurringUnit": "str"  # Optional.
                                }
                            ],
                            "isEnabled": bool,  # Optional.
                            "priceInUsd": 0.0,  # Optional.
                            "uniqueID": "str",  # Optional.
                            "unitOfMeasure": "str"  # Optional.
                        }
                    ],
                    "isHidden": bool,  # Optional.
                    "marketStates": [
                        {
                            "marketCode": "str",  # Optional. ISO Country Code.
                            "state": "str"  # Optional. Known values are: "Disabled",
                              "Enabled", "StopSelling", and "Terminated".
                        }
                    ],
                    "priceSchedules": [
                        {
                            "friendlyName": "str",  # Optional.
                            "isBaseSchedule": bool,  # Optional.
                            "marketCodes": [
                                "str"  # Optional. ISO country code.
                            ],
                            "schedules": [
                                {
                                    "dateTimeRange": {
                                        "endAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        },
                                        "startAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        }
                                    },
                                    "priceCadence": {
                                        "type": "str",  # Optional. Known
                                          values are: "Month" and "Year".
                                        "value": 0  # Optional.
                                    },
                                    "pricingModel": "str",  # Optional. Known
                                      values are: "Flat", "Recurring", and "Usage".
                                    "pricingUnits": [
                                        {
                                            "isUnlimitedUnit": bool,  #
                                              Optional.
                                            "lowerUnit": 0,  # Optional.
                                            "name": "str",  # Optional.
                                              Known values are: "sharedcore" and "transactions".
                                            "unitType": "str",  #
                                              Optional.
                                            "upperUnit": 0  # Optional.
                                        }
                                    ],
                                    "retailPrice": {
                                        "currencyCode": "str",  # Optional.
                                        "openPrice": 0.0,  # Optional.
                                        "priceTierID": "str"  # Optional.
                                    }
                                }
                            ]
                        }
                    ],
                    "properties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "FeatureAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "tenantAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "trial": {
                        "dateTimeRange": {
                            "endAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            },
                            "startAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            }
                        },
                        "duration": 0,  # Optional.
                        "durationType": "str",  # Optional. Known values are: "Minute",
                          "Days", and "Months".
                        "type": "str"  # Optional. Known values are: "NoTrial",
                          "TimedAccess", "TimedUsage", and "Unlimited".
                    },
                    "visibility": "str"  # Optional. Known values are: "Public" and "Private".
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "customMeters": [
                        {
                            "ID": "str",  # Optional.
                            "displayName": "str",  # Optional.
                            "includedBaseQuantities": [
                                {
                                    "isInfinite": bool,  # Optional.
                                    "quantity": 0.0,  # Optional.
                                    "recurringUnit": "str"  # Optional.
                                }
                            ],
                            "isEnabled": bool,  # Optional.
                            "priceInUsd": 0.0,  # Optional.
                            "uniqueID": "str",  # Optional.
                            "unitOfMeasure": "str"  # Optional.
                        }
                    ],
                    "isHidden": bool,  # Optional.
                    "marketStates": [
                        {
                            "marketCode": "str",  # Optional. ISO Country Code.
                            "state": "str"  # Optional. Known values are: "Disabled",
                              "Enabled", "StopSelling", and "Terminated".
                        }
                    ],
                    "priceSchedules": [
                        {
                            "friendlyName": "str",  # Optional.
                            "isBaseSchedule": bool,  # Optional.
                            "marketCodes": [
                                "str"  # Optional. ISO country code.
                            ],
                            "schedules": [
                                {
                                    "dateTimeRange": {
                                        "endAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        },
                                        "startAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        }
                                    },
                                    "priceCadence": {
                                        "type": "str",  # Optional. Known
                                          values are: "Month" and "Year".
                                        "value": 0  # Optional.
                                    },
                                    "pricingModel": "str",  # Optional. Known
                                      values are: "Flat", "Recurring", and "Usage".
                                    "pricingUnits": [
                                        {
                                            "isUnlimitedUnit": bool,  #
                                              Optional.
                                            "lowerUnit": 0,  # Optional.
                                            "name": "str",  # Optional.
                                              Known values are: "sharedcore" and "transactions".
                                            "unitType": "str",  #
                                              Optional.
                                            "upperUnit": 0  # Optional.
                                        }
                                    ],
                                    "retailPrice": {
                                        "currencyCode": "str",  # Optional.
                                        "openPrice": 0.0,  # Optional.
                                        "priceTierID": "str"  # Optional.
                                    }
                                }
                            ]
                        }
                    ],
                    "properties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "FeatureAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "tenantAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "trial": {
                        "dateTimeRange": {
                            "endAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            },
                            "startAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            }
                        },
                        "duration": 0,  # Optional.
                        "durationType": "str",  # Optional. Known values are: "Minute",
                          "Days", and "Months".
                        "type": "str"  # Optional. Known values are: "NoTrial",
                          "TimedAccess", "TimedUsage", and "Unlimited".
                    },
                    "visibility": "str"  # Optional. Known values are: "Public" and "Private".
                }
        """

    @overload
    async def put_product_feature_availability_by_feature_availability_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Update a feature availability resouce.

        Sample request:
                         PUT products/{productID}/featureavailabilities/{featureavailabilityID}
                         {
                             ...
                         }.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.FeatureAvailability. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "customMeters": [
                        {
                            "ID": "str",  # Optional.
                            "displayName": "str",  # Optional.
                            "includedBaseQuantities": [
                                {
                                    "isInfinite": bool,  # Optional.
                                    "quantity": 0.0,  # Optional.
                                    "recurringUnit": "str"  # Optional.
                                }
                            ],
                            "isEnabled": bool,  # Optional.
                            "priceInUsd": 0.0,  # Optional.
                            "uniqueID": "str",  # Optional.
                            "unitOfMeasure": "str"  # Optional.
                        }
                    ],
                    "isHidden": bool,  # Optional.
                    "marketStates": [
                        {
                            "marketCode": "str",  # Optional. ISO Country Code.
                            "state": "str"  # Optional. Known values are: "Disabled",
                              "Enabled", "StopSelling", and "Terminated".
                        }
                    ],
                    "priceSchedules": [
                        {
                            "friendlyName": "str",  # Optional.
                            "isBaseSchedule": bool,  # Optional.
                            "marketCodes": [
                                "str"  # Optional. ISO country code.
                            ],
                            "schedules": [
                                {
                                    "dateTimeRange": {
                                        "endAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        },
                                        "startAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        }
                                    },
                                    "priceCadence": {
                                        "type": "str",  # Optional. Known
                                          values are: "Month" and "Year".
                                        "value": 0  # Optional.
                                    },
                                    "pricingModel": "str",  # Optional. Known
                                      values are: "Flat", "Recurring", and "Usage".
                                    "pricingUnits": [
                                        {
                                            "isUnlimitedUnit": bool,  #
                                              Optional.
                                            "lowerUnit": 0,  # Optional.
                                            "name": "str",  # Optional.
                                              Known values are: "sharedcore" and "transactions".
                                            "unitType": "str",  #
                                              Optional.
                                            "upperUnit": 0  # Optional.
                                        }
                                    ],
                                    "retailPrice": {
                                        "currencyCode": "str",  # Optional.
                                        "openPrice": 0.0,  # Optional.
                                        "priceTierID": "str"  # Optional.
                                    }
                                }
                            ]
                        }
                    ],
                    "properties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "FeatureAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "tenantAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "trial": {
                        "dateTimeRange": {
                            "endAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            },
                            "startAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            }
                        },
                        "duration": 0,  # Optional.
                        "durationType": "str",  # Optional. Known values are: "Minute",
                          "Days", and "Months".
                        "type": "str"  # Optional. Known values are: "NoTrial",
                          "TimedAccess", "TimedUsage", and "Unlimited".
                    },
                    "visibility": "str"  # Optional. Known values are: "Public" and "Private".
                }
        """

    @distributed_trace_async
    async def put_product_feature_availability_by_feature_availability_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Update a feature availability resouce.

        Sample request:
                         PUT products/{productID}/featureavailabilities/{featureavailabilityID}
                         {
                             ...
                         }.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Availabilities.FeatureAvailability. Is either a model type or a
         IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "customMeters": [
                        {
                            "ID": "str",  # Optional.
                            "displayName": "str",  # Optional.
                            "includedBaseQuantities": [
                                {
                                    "isInfinite": bool,  # Optional.
                                    "quantity": 0.0,  # Optional.
                                    "recurringUnit": "str"  # Optional.
                                }
                            ],
                            "isEnabled": bool,  # Optional.
                            "priceInUsd": 0.0,  # Optional.
                            "uniqueID": "str",  # Optional.
                            "unitOfMeasure": "str"  # Optional.
                        }
                    ],
                    "isHidden": bool,  # Optional.
                    "marketStates": [
                        {
                            "marketCode": "str",  # Optional. ISO Country Code.
                            "state": "str"  # Optional. Known values are: "Disabled",
                              "Enabled", "StopSelling", and "Terminated".
                        }
                    ],
                    "priceSchedules": [
                        {
                            "friendlyName": "str",  # Optional.
                            "isBaseSchedule": bool,  # Optional.
                            "marketCodes": [
                                "str"  # Optional. ISO country code.
                            ],
                            "schedules": [
                                {
                                    "dateTimeRange": {
                                        "endAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        },
                                        "startAt": {
                                            "dateTimeInUtc": "2020-02-20
                                              00:00:00",  # Optional.
                                            "localizePerMarket": bool  #
                                              Optional.
                                        }
                                    },
                                    "priceCadence": {
                                        "type": "str",  # Optional. Known
                                          values are: "Month" and "Year".
                                        "value": 0  # Optional.
                                    },
                                    "pricingModel": "str",  # Optional. Known
                                      values are: "Flat", "Recurring", and "Usage".
                                    "pricingUnits": [
                                        {
                                            "isUnlimitedUnit": bool,  #
                                              Optional.
                                            "lowerUnit": 0,  # Optional.
                                            "name": "str",  # Optional.
                                              Known values are: "sharedcore" and "transactions".
                                            "unitType": "str",  #
                                              Optional.
                                            "upperUnit": 0  # Optional.
                                        }
                                    ],
                                    "retailPrice": {
                                        "currencyCode": "str",  # Optional.
                                        "openPrice": 0.0,  # Optional.
                                        "priceTierID": "str"  # Optional.
                                    }
                                }
                            ]
                        }
                    ],
                    "properties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "FeatureAvailability"
                    "subscriptionAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "tenantAudiences": [
                        {
                            "ID": "str",  # Optional.
                            "description": "str"  # Optional.
                        }
                    ],
                    "trial": {
                        "dateTimeRange": {
                            "endAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            },
                            "startAt": {
                                "dateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                                "localizePerMarket": bool  # Optional.
                            }
                        },
                        "duration": 0,  # Optional.
                        "durationType": "str",  # Optional. Known values are: "Minute",
                          "Days", and "Months".
                        "type": "str"  # Optional. Known values are: "NoTrial",
                          "TimedAccess", "TimedUsage", and "Unlimited".
                    },
                    "visibility": "str"  # Optional. Known values are: "Public" and "Private".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_feature_availability_by_feature_availability_id_request(
            product_id=self._config.product_id,
            feature_availability_id=self._config.feature_availability_id,
            authorization=self._config.authorization,
            expand=self._config.expand,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_submission_submissionss_by_product_id(
        self, *, filter: Optional[str] = None, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of Submissions.

        Sample request:

        .. code-block::

           GET /products/{productID}/submissions

               =&gt; returns both Inprogress and Published Submissions for Retail

           GET /products/{productID}/submissions?state={state}

               =&gt; returns the Submission (either Inprogress or Published) of requested state for
        Retail

           GET /products/{productID}/submissions?sandboxID={sandboxID}

               =&gt; returns both Inprogress and Published Submissions for requested Sandbox

           GET /products/{productID}/submissions?sandboxID={sandboxID}&amp;state={state}

               =&gt; returns the Submission (either Inprogress or Published) of requested state for
        requested Sandbox

           GET /products/{productID}/submissions?flightID={flightID}

               =&gt; returns both Inprogress and Published Submissions for requested Flight

           GET /products/{productID}/submissions?flightID={flightID}&amp;state={state}

               =&gt; returns the Submission (either Inprogress or Published) of requested state for
        requested Flight.

        :keyword filter: Filter of submissions. Filter by State and/or Targets with operation eq is
         allowed. Default value is None.
        :paramtype filter: str
        :keyword expand: Use $expand=PublishOption to Include publish option in response. Default value
         is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "ID": "str",  # Optional.
                            "areResourcesReady": bool,  # Optional.
                            "extendedProperties": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "friendlyName": "str",  # Optional.
                            "pendingUpdateInfo": {
                                "failureReason": "str",  # Optional.
                                "href": "str",  # Optional.
                                "status": "str",  # Optional.
                                "updateType": "str"  # Optional.
                            },
                            "publishOption": {
                                "certificationNotes": "str",  # Optional.
                                "isAutoPromote": bool,  # Optional.
                                "isManualPublish": bool,  # Optional.
                                "releaseTimeInUtc": "2020-02-20 00:00:00"  #
                                  Optional.
                            },
                            "publishedTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                            "releaseNumber": 0,  # Optional.
                            "resourceType": "str",  # Optional. "Submission"
                            "resources": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "state": "str",  # Optional. Known values are: "Inprogress"
                              and "Published".
                            "substate": "str",  # Optional. Known values are: "InDraft",
                              "Submitted", "Failed", "FailedInCertification", "ReadyToPublish",
                              "Publishing", "Published", and "InStore".
                            "targets": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "variantResources": [
                                {
                                    "resources": [
                                        {
                                            "type": "str",  # Optional.
                                            "value": "str"  # Optional.
                                        }
                                    ],
                                    "variantID": "str"  # Optional.
                                }
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_submission_submissionss_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            filter=filter,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_submission_submissions_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a new Submission.

        Sample request:

        .. code-block::

           POST /products/{productID}/submissions
           {
               // empty Json body
           }
               =&gt; create Inprogress Submission for Retail

           POST /products/{productID}/submissions
           {
               "sandboxID":"{sandboxID}"
           }
               =&gt; create Inprogress Submission for a Sandbox

           POST /products/{productID}/submissions
           {
               "flightID":"{flightID}"
           }
               =&gt; create Inprogress Submission for a Flight.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Submissions.SubmissionCreationRequest. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "extendedProperties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "publishOption": {
                        "certificationNotes": "str",  # Optional.
                        "isAutoPromote": bool,  # Optional.
                        "isManualPublish": bool,  # Optional.
                        "releaseTimeInUtc": "2020-02-20 00:00:00"  # Optional.
                    },
                    "resourceType": "str",  # Optional. "SubmissionCreationRequest"
                    "resources": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "targets": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "variantResources": [
                        {
                            "resources": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "variantID": "str"  # Optional.
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "ID": "str",  # Optional.
                    "areResourcesReady": bool,  # Optional.
                    "extendedProperties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "friendlyName": "str",  # Optional.
                    "pendingUpdateInfo": {
                        "failureReason": "str",  # Optional.
                        "href": "str",  # Optional.
                        "status": "str",  # Optional.
                        "updateType": "str"  # Optional.
                    },
                    "publishOption": {
                        "certificationNotes": "str",  # Optional.
                        "isAutoPromote": bool,  # Optional.
                        "isManualPublish": bool,  # Optional.
                        "releaseTimeInUtc": "2020-02-20 00:00:00"  # Optional.
                    },
                    "publishedTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                    "releaseNumber": 0,  # Optional.
                    "resourceType": "str",  # Optional. "Submission"
                    "resources": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "state": "str",  # Optional. Known values are: "Inprogress" and "Published".
                    "substate": "str",  # Optional. Known values are: "InDraft", "Submitted",
                      "Failed", "FailedInCertification", "ReadyToPublish", "Publishing", "Published",
                      and "InStore".
                    "targets": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "variantResources": [
                        {
                            "resources": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "variantID": "str"  # Optional.
                        }
                    ]
                }
        """

    @overload
    async def post_product_submission_submissions_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a new Submission.

        Sample request:

        .. code-block::

           POST /products/{productID}/submissions
           {
               // empty Json body
           }
               =&gt; create Inprogress Submission for Retail

           POST /products/{productID}/submissions
           {
               "sandboxID":"{sandboxID}"
           }
               =&gt; create Inprogress Submission for a Sandbox

           POST /products/{productID}/submissions
           {
               "flightID":"{flightID}"
           }
               =&gt; create Inprogress Submission for a Flight.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Submissions.SubmissionCreationRequest. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "ID": "str",  # Optional.
                    "areResourcesReady": bool,  # Optional.
                    "extendedProperties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "friendlyName": "str",  # Optional.
                    "pendingUpdateInfo": {
                        "failureReason": "str",  # Optional.
                        "href": "str",  # Optional.
                        "status": "str",  # Optional.
                        "updateType": "str"  # Optional.
                    },
                    "publishOption": {
                        "certificationNotes": "str",  # Optional.
                        "isAutoPromote": bool,  # Optional.
                        "isManualPublish": bool,  # Optional.
                        "releaseTimeInUtc": "2020-02-20 00:00:00"  # Optional.
                    },
                    "publishedTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                    "releaseNumber": 0,  # Optional.
                    "resourceType": "str",  # Optional. "Submission"
                    "resources": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "state": "str",  # Optional. Known values are: "Inprogress" and "Published".
                    "substate": "str",  # Optional. Known values are: "InDraft", "Submitted",
                      "Failed", "FailedInCertification", "ReadyToPublish", "Publishing", "Published",
                      and "InStore".
                    "targets": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "variantResources": [
                        {
                            "resources": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "variantID": "str"  # Optional.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def post_product_submission_submissions_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a new Submission.

        Sample request:

        .. code-block::

           POST /products/{productID}/submissions
           {
               // empty Json body
           }
               =&gt; create Inprogress Submission for Retail

           POST /products/{productID}/submissions
           {
               "sandboxID":"{sandboxID}"
           }
               =&gt; create Inprogress Submission for a Sandbox

           POST /products/{productID}/submissions
           {
               "flightID":"{flightID}"
           }
               =&gt; create Inprogress Submission for a Flight.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.Submissions.SubmissionCreationRequest. Is either a model type or
         a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "ID": "str",  # Optional.
                    "areResourcesReady": bool,  # Optional.
                    "extendedProperties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "friendlyName": "str",  # Optional.
                    "pendingUpdateInfo": {
                        "failureReason": "str",  # Optional.
                        "href": "str",  # Optional.
                        "status": "str",  # Optional.
                        "updateType": "str"  # Optional.
                    },
                    "publishOption": {
                        "certificationNotes": "str",  # Optional.
                        "isAutoPromote": bool,  # Optional.
                        "isManualPublish": bool,  # Optional.
                        "releaseTimeInUtc": "2020-02-20 00:00:00"  # Optional.
                    },
                    "publishedTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                    "releaseNumber": 0,  # Optional.
                    "resourceType": "str",  # Optional. "Submission"
                    "resources": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "state": "str",  # Optional. Known values are: "Inprogress" and "Published".
                    "substate": "str",  # Optional. Known values are: "InDraft", "Submitted",
                      "Failed", "FailedInCertification", "ReadyToPublish", "Publishing", "Published",
                      and "InStore".
                    "targets": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "variantResources": [
                        {
                            "resources": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "variantID": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_submission_submissions_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_submission_by_submission_id(
        self, *, expand: Optional[str] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a Submission.

        Sample request:

        .. code-block::

           GET /products/{productID}/submissions/{submissionID}.

        :keyword expand: Use $expand=PublishOption to Include publish option in response. Default value
         is None.
        :paramtype expand: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "ID": "str",  # Optional.
                    "areResourcesReady": bool,  # Optional.
                    "extendedProperties": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "friendlyName": "str",  # Optional.
                    "pendingUpdateInfo": {
                        "failureReason": "str",  # Optional.
                        "href": "str",  # Optional.
                        "status": "str",  # Optional.
                        "updateType": "str"  # Optional.
                    },
                    "publishOption": {
                        "certificationNotes": "str",  # Optional.
                        "isAutoPromote": bool,  # Optional.
                        "isManualPublish": bool,  # Optional.
                        "releaseTimeInUtc": "2020-02-20 00:00:00"  # Optional.
                    },
                    "publishedTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                    "releaseNumber": 0,  # Optional.
                    "resourceType": "str",  # Optional. "Submission"
                    "resources": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "state": "str",  # Optional. Known values are: "Inprogress" and "Published".
                    "substate": "str",  # Optional. Known values are: "InDraft", "Submitted",
                      "Failed", "FailedInCertification", "ReadyToPublish", "Publishing", "Published",
                      and "InStore".
                    "targets": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "variantResources": [
                        {
                            "resources": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "variantID": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_submission_by_submission_id_request(
            product_id=self._config.product_id,
            submission_id=self._config.submission_id,
            authorization=self._config.authorization,
            expand=expand,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_submission_by_submission_id(self, **kwargs: Any) -> Optional[str]:
        """Deletes a Submission.

        Sample request:

        .. code-block::

           DELETE /products/{productID}/submissions/{submissionID}.

        :return: str or None
        :rtype: str or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[str]]

        request = build_delete_product_submission_by_submission_id_request(
            product_id=self._config.product_id,
            submission_id=self._config.submission_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def post_product_submission_promote_by_submission_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Promote a Preview Submission to live.

        Sample request:

        .. code-block::

           POST /products/{productID}/submissions/{submissionID}/promote
           [empty body].

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "completeDateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                    "startDateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                    "state": "str",  # Optional.
                    "targetEnvironment": "str",  # Optional.
                    "type": "str",  # Optional.
                    "workflowSteps": [
                        {
                            "completeDateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                            "name": "str",  # Optional.
                            "startDateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                            "state": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_post_product_submission_promote_by_submission_id_request(
            product_id=self._config.product_id,
            submission_id=self._config.submission_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_submission_reportss_by_submission_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a collection of CertificationReport for a Submission.

        Sample request:

        .. code-block::

           GET /products/{productID}/submissions/{submissionID}/reports.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "fileUri": "str",  # Optional.
                            "reportTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                            "status": "str"  # Optional. Known values are: "Pending",
                              "Failed", "Passed", "PassedWithNotes", and "Unknown".
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_submission_reportss_by_submission_id_request(
            product_id=self._config.product_id,
            submission_id=self._config.submission_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_submission_validations_by_submission_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns Validation for a Submission.

        Sample request:
                         GET /products/{productID}/submissions/{submissionID}/validations.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "errorCode": "str",  # Optional.
                            "message": "str",  # Optional.
                            "resource": "str",  # Optional.
                            "severity": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_submission_validations_by_submission_id_request(
            product_id=self._config.product_id,
            submission_id=self._config.submission_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_submission_workflowdetails_by_submission_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns workflow details for a Submission.

        Sample request:
                         GET /products/{productID}/submissions/{submissionID}/workflowdetails.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "completeDateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                            "startDateTimeInUtc": "2020-02-20 00:00:00",  # Optional.
                            "state": "str",  # Optional.
                            "targetEnvironment": "str",  # Optional.
                            "type": "str",  # Optional.
                            "workflowSteps": [
                                {
                                    "completeDateTimeInUtc": "2020-02-20
                                      00:00:00",  # Optional.
                                    "name": "str",  # Optional.
                                    "startDateTimeInUtc": "2020-02-20 00:00:00",
                                      # Optional.
                                    "state": "str"  # Optional.
                                }
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_submission_workflowdetails_by_submission_id_request(
            product_id=self._config.product_id,
            submission_id=self._config.submission_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_lead_configuration_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns the LeadConfiguration associated with the product.

        Sample request:

        .. code-block::

           GET /products/{productID}/leadconfiguration.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_lead_configuration_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), {})

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_lead_configuration_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Creates a new LeadConfiguration associated with the product.

        Sample request:

        .. code-block::

           POST /products/{productID}/leadconfiguration.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.LeadManagement.BaseLeadConfiguration. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {}
        """

    @overload
    async def post_product_lead_configuration_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Creates a new LeadConfiguration associated with the product.

        Sample request:

        .. code-block::

           POST /products/{productID}/leadconfiguration.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.LeadManagement.BaseLeadConfiguration. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_product_lead_configuration_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> JSON:
        """Creates a new LeadConfiguration associated with the product.

        Sample request:

        .. code-block::

           POST /products/{productID}/leadconfiguration.

        :param body: Request body of a
         Microsoft.Ingestion.Api.Models.LeadManagement.BaseLeadConfiguration. Is either a model type or
         a IO type. Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_lead_configuration_by_product_id_request(
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def get_product_supplemental_content_get_by_instance_id_s_by_instance_id(
        self, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a set of SupplementalContents for the product.

        Returns a set of SupplementalContents for the product.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "assets": [
                                {
                                    "assetID": "str",  # Optional.
                                    "fileName": "str",  # Optional.
                                    "fileSasUri": "str",  # Optional.
                                    "type": "str"  # Optional.
                                }
                            ],
                            "resourceType": "str",  # Optional. "SupplementalContent"
                            "supportedEditions": [
                                "str"  # Optional.
                            ],
                            "targetRelease": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_supplemental_content_get_by_instance_id_s_by_instance_id_request(
            product_id=self._config.product_id,
            instance_id=self._config.instance_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_supplemental_content_by_instance_id(
        self, instance_id: str, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a SupplementalContent.

        Returns a SupplementalContent.

        :param instance_id: ID of supplemental content instance. Required.
        :type instance_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assets": [
                        {
                            "assetID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "SupplementalContent"
                    "supportedEditions": [
                        "str"  # Optional.
                    ],
                    "targetRelease": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_supplemental_content_by_instance_id_request(
            instance_id=instance_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_supplemental_content_by_instance_id(
        self,
        instance_id: str,
        body: Optional[JSON] = None,
        *,
        if_match: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[JSON, str]:
        """Update a SupplementalContent.

        Update a SupplementalContent.

        :param instance_id: ID of supplemental content instance. Required.
        :type instance_id: str
        :param body: Request body of a SupplementalContent. Default value is None.
        :type body: JSON
        :keyword if_match: ETag of the resource to be matched. Required.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assets": [
                        {
                            "assetID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "SupplementalContent"
                    "supportedEditions": [
                        "str"  # Optional.
                    ],
                    "targetRelease": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assets": [
                        {
                            "assetID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "SupplementalContent"
                    "supportedEditions": [
                        "str"  # Optional.
                    ],
                    "targetRelease": "str"  # Optional.
                }
        """

    @overload
    async def put_product_supplemental_content_by_instance_id(
        self,
        instance_id: str,
        body: Optional[IO] = None,
        *,
        if_match: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[JSON, str]:
        """Update a SupplementalContent.

        Update a SupplementalContent.

        :param instance_id: ID of supplemental content instance. Required.
        :type instance_id: str
        :param body: Request body of a SupplementalContent. Default value is None.
        :type body: IO
        :keyword if_match: ETag of the resource to be matched. Required.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assets": [
                        {
                            "assetID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "SupplementalContent"
                    "supportedEditions": [
                        "str"  # Optional.
                    ],
                    "targetRelease": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def put_product_supplemental_content_by_instance_id(
        self, instance_id: str, body: Optional[Union[JSON, IO]] = None, *, if_match: str, **kwargs: Any
    ) -> Union[JSON, str]:
        """Update a SupplementalContent.

        Update a SupplementalContent.

        :param instance_id: ID of supplemental content instance. Required.
        :type instance_id: str
        :param body: Request body of a SupplementalContent. Is either a model type or a IO type.
         Default value is None.
        :type body: JSON or IO
        :keyword if_match: ETag of the resource to be matched. Required.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assets": [
                        {
                            "assetID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "SupplementalContent"
                    "supportedEditions": [
                        "str"  # Optional.
                    ],
                    "targetRelease": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_supplemental_content_by_instance_id_request(
            instance_id=instance_id,
            product_id=self._config.product_id,
            if_match=if_match,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def post_product_supplemental_content_commit_by_instance_id(
        self, instance_id: str, **kwargs: Any
    ) -> Union[JSON, str]:
        """Commit a SupplementalContent.

        Commit a SupplementalContent.

        :param instance_id: ID of supplemental content instance. Required.
        :type instance_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assets": [
                        {
                            "assetID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ],
                    "resourceType": "str",  # Optional. "SupplementalContent"
                    "supportedEditions": [
                        "str"  # Optional.
                    ],
                    "targetRelease": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_post_product_supplemental_content_commit_by_instance_id_request(
            instance_id=instance_id,
            product_id=self._config.product_id,
            authorization=self._config.authorization,
            client_request_id=self._config.client_request_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_cosell_asset_cosell_assetss_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns a paged collection of CosellAsset resources for product.

        Returns a paged collection of CosellAsset resources for product.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "resourceType": "str",  # Optional. "CosellAsset"
                            "state": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_cosell_asset_cosell_assetss_by_product_id_request(
            product_id=self._config.product_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_cosell_asset_cosell_assets_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a CosellAsset.

        Create a CosellAsset.

        :param body: Request body of a CosellAsset. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }
        """

    @overload
    async def post_product_cosell_asset_cosell_assets_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a CosellAsset.

        Create a CosellAsset.

        :param body: Request body of a CosellAsset. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def post_product_cosell_asset_cosell_assets_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Create a CosellAsset.

        Create a CosellAsset.

        :param body: Request body of a CosellAsset. Is either a model type or a IO type. Default value
         is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_cosell_asset_cosell_assets_by_product_id_request(
            product_id=self._config.product_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_cosell_asset_get_by_instance_id_s_by_instance_id(
        self, instance_id: str, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of CosellAsset resources for given CosellListing instanceID.

        Returns a paged collection of CosellAsset resources for given CosellListing instanceID.

        :param instance_id: Instance ID. Required.
        :type instance_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "fileName": "str",  # Optional.
                            "fileSasUri": "str",  # Optional.
                            "resourceType": "str",  # Optional. "CosellAsset"
                            "state": "str",  # Optional.
                            "type": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_cosell_asset_get_by_instance_id_s_by_instance_id_request(
            instance_id=instance_id,
            product_id=self._config.product_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_cosell_asset_by_cosell_asset_id(
        self, cosell_asset_id: str, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a CosellAsset.

        Returns a CosellAsset.

        :param cosell_asset_id: ID of Cosellasset. Required.
        :type cosell_asset_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_cosell_asset_by_cosell_asset_id_request(
            cosell_asset_id=cosell_asset_id,
            product_id=self._config.product_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_cosell_asset_by_cosell_asset_id(
        self,
        cosell_asset_id: str,
        body: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a CosellAsset.

        Updates a CosellAsset.

        :param cosell_asset_id: ID of Cosellasset. Required.
        :type cosell_asset_id: str
        :param body: Request body of a CosellAsset. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }
        """

    @overload
    async def put_product_cosell_asset_by_cosell_asset_id(
        self, cosell_asset_id: str, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a CosellAsset.

        Updates a CosellAsset.

        :param cosell_asset_id: ID of Cosellasset. Required.
        :type cosell_asset_id: str
        :param body: Request body of a CosellAsset. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }
        """

    @distributed_trace_async
    async def put_product_cosell_asset_by_cosell_asset_id(
        self, cosell_asset_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates a CosellAsset.

        Updates a CosellAsset.

        :param cosell_asset_id: ID of Cosellasset. Required.
        :type cosell_asset_id: str
        :param body: Request body of a CosellAsset. Is either a model type or a IO type. Default value
         is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "fileName": "str",  # Optional.
                    "fileSasUri": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellAsset"
                    "state": "str",  # Optional.
                    "type": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_cosell_asset_by_cosell_asset_id_request(
            cosell_asset_id=cosell_asset_id,
            product_id=self._config.product_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def delete_product_cosell_asset_by_cosell_asset_id(
        self, cosell_asset_id: str, **kwargs: Any
    ) -> Optional[str]:
        """Deletes a CosellAsset.

        Deletes a CosellAsset.

        :param cosell_asset_id: ID of Cosellasset. Required.
        :type cosell_asset_id: str
        :return: str or None
        :rtype: str or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[str]]

        request = build_delete_product_cosell_asset_by_cosell_asset_id_request(
            cosell_asset_id=cosell_asset_id,
            product_id=self._config.product_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_product_cosell_listing_by_instance_id(self, instance_id: str, **kwargs: Any) -> Union[JSON, str]:
        """Returns CosellListing resource.

        Returns CosellListing resource.

        :param instance_id: Instance ID. Required.
        :type instance_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assetReferences": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "contacts": [
                        {
                            "email": "str",  # Optional.
                            "jobTitle": "str",  # Optional.
                            "name": "str",  # Optional.
                            "regions": [
                                "str"  # Optional.
                            ],
                            "role": "str",  # Optional.
                            "subRegions": [
                                "str"  # Optional.
                            ],
                            "type": "str"  # Optional.
                        }
                    ],
                    "endCustomerSegments": [
                        "str"  # Optional.
                    ],
                    "offerPlatforms": [
                        "str"  # Optional.
                    ],
                    "offerType": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellListing"
                    "solutionAreas": [
                        {
                            "area": "str",  # Optional.
                            "subAreas": [
                                "str"  # Optional.
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_cosell_listing_by_instance_id_request(
            instance_id=instance_id,
            product_id=self._config.product_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def put_product_cosell_listing_by_instance_id(
        self, instance_id: str, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates CosellListing resource.

        Updates CosellListing resource.

        :param instance_id: Instance ID. Required.
        :type instance_id: str
        :param body: Request body of a CosellListing. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assetReferences": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "contacts": [
                        {
                            "email": "str",  # Optional.
                            "jobTitle": "str",  # Optional.
                            "name": "str",  # Optional.
                            "regions": [
                                "str"  # Optional.
                            ],
                            "role": "str",  # Optional.
                            "subRegions": [
                                "str"  # Optional.
                            ],
                            "type": "str"  # Optional.
                        }
                    ],
                    "endCustomerSegments": [
                        "str"  # Optional.
                    ],
                    "offerPlatforms": [
                        "str"  # Optional.
                    ],
                    "offerType": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellListing"
                    "solutionAreas": [
                        {
                            "area": "str",  # Optional.
                            "subAreas": [
                                "str"  # Optional.
                            ]
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assetReferences": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "contacts": [
                        {
                            "email": "str",  # Optional.
                            "jobTitle": "str",  # Optional.
                            "name": "str",  # Optional.
                            "regions": [
                                "str"  # Optional.
                            ],
                            "role": "str",  # Optional.
                            "subRegions": [
                                "str"  # Optional.
                            ],
                            "type": "str"  # Optional.
                        }
                    ],
                    "endCustomerSegments": [
                        "str"  # Optional.
                    ],
                    "offerPlatforms": [
                        "str"  # Optional.
                    ],
                    "offerType": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellListing"
                    "solutionAreas": [
                        {
                            "area": "str",  # Optional.
                            "subAreas": [
                                "str"  # Optional.
                            ]
                        }
                    ]
                }
        """

    @overload
    async def put_product_cosell_listing_by_instance_id(
        self, instance_id: str, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates CosellListing resource.

        Updates CosellListing resource.

        :param instance_id: Instance ID. Required.
        :type instance_id: str
        :param body: Request body of a CosellListing. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assetReferences": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "contacts": [
                        {
                            "email": "str",  # Optional.
                            "jobTitle": "str",  # Optional.
                            "name": "str",  # Optional.
                            "regions": [
                                "str"  # Optional.
                            ],
                            "role": "str",  # Optional.
                            "subRegions": [
                                "str"  # Optional.
                            ],
                            "type": "str"  # Optional.
                        }
                    ],
                    "endCustomerSegments": [
                        "str"  # Optional.
                    ],
                    "offerPlatforms": [
                        "str"  # Optional.
                    ],
                    "offerType": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellListing"
                    "solutionAreas": [
                        {
                            "area": "str",  # Optional.
                            "subAreas": [
                                "str"  # Optional.
                            ]
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def put_product_cosell_listing_by_instance_id(
        self, instance_id: str, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Updates CosellListing resource.

        Updates CosellListing resource.

        :param instance_id: Instance ID. Required.
        :type instance_id: str
        :param body: Request body of a CosellListing. Is either a model type or a IO type. Default
         value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.etag": "str",  # Optional.
                    "ID": "str",  # Optional.
                    "assetReferences": [
                        {
                            "type": "str",  # Optional.
                            "value": "str"  # Optional.
                        }
                    ],
                    "contacts": [
                        {
                            "email": "str",  # Optional.
                            "jobTitle": "str",  # Optional.
                            "name": "str",  # Optional.
                            "regions": [
                                "str"  # Optional.
                            ],
                            "role": "str",  # Optional.
                            "subRegions": [
                                "str"  # Optional.
                            ],
                            "type": "str"  # Optional.
                        }
                    ],
                    "endCustomerSegments": [
                        "str"  # Optional.
                    ],
                    "offerPlatforms": [
                        "str"  # Optional.
                    ],
                    "offerType": "str",  # Optional.
                    "resourceType": "str",  # Optional. "CosellListing"
                    "solutionAreas": [
                        {
                            "area": "str",  # Optional.
                            "subAreas": [
                                "str"  # Optional.
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_put_product_cosell_listing_by_instance_id_request(
            instance_id=instance_id,
            product_id=self._config.product_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_cosell_listing_get_by_instance_id_s_by_instance_id(
        self, instance_id: str, **kwargs: Any
    ) -> Union[JSON, str]:
        """Returns a paged collection of Listing resources.

        Returns a paged collection of Listing resources.

        :param instance_id: Instance ID. Required.
        :type instance_id: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@odata.nextLink": "str",  # Optional.
                    "value": [
                        {
                            "@odata.etag": "str",  # Optional.
                            "ID": "str",  # Optional.
                            "assetReferences": [
                                {
                                    "type": "str",  # Optional.
                                    "value": "str"  # Optional.
                                }
                            ],
                            "contacts": [
                                {
                                    "email": "str",  # Optional.
                                    "jobTitle": "str",  # Optional.
                                    "name": "str",  # Optional.
                                    "regions": [
                                        "str"  # Optional.
                                    ],
                                    "role": "str",  # Optional.
                                    "subRegions": [
                                        "str"  # Optional.
                                    ],
                                    "type": "str"  # Optional.
                                }
                            ],
                            "endCustomerSegments": [
                                "str"  # Optional.
                            ],
                            "offerPlatforms": [
                                "str"  # Optional.
                            ],
                            "offerType": "str",  # Optional.
                            "resourceType": "str",  # Optional. "CosellListing"
                            "solutionAreas": [
                                {
                                    "area": "str",  # Optional.
                                    "subAreas": [
                                        "str"  # Optional.
                                    ]
                                }
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_cosell_listing_get_by_instance_id_s_by_instance_id_request(
            instance_id=instance_id,
            product_id=self._config.product_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @distributed_trace_async
    async def get_product_reseller_configuration_by_product_id(self, **kwargs: Any) -> Union[JSON, str]:
        """Returns ResellerConfiguration for a product.

        Returns ResellerConfiguration for a product.

        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "resellerChannelState": "str",  # Optional. Known values are: "PartialOptIn",
                      "OptOut", and "Optin".
                    "resourceType": "str",  # Optional. "ResellerConfiguration"
                    "tenantIds": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        request = build_get_product_reseller_configuration_by_product_id_request(
            product_id=self._config.product_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)

    @overload
    async def post_product_reseller_configuration_by_product_id(
        self, body: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ResellerConfiguration.

        Creates a ResellerConfiguration.

        :param body: Request body of a ResellerConfiguration. Default value is None.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "resellerChannelState": "str",  # Optional. Known values are: "PartialOptIn",
                      "OptOut", and "Optin".
                    "resourceType": "str",  # Optional. "ResellerConfiguration"
                    "tenantIds": [
                        "str"  # Optional.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "resellerChannelState": "str",  # Optional. Known values are: "PartialOptIn",
                      "OptOut", and "Optin".
                    "resourceType": "str",  # Optional. "ResellerConfiguration"
                    "tenantIds": [
                        "str"  # Optional.
                    ]
                }
        """

    @overload
    async def post_product_reseller_configuration_by_product_id(
        self, body: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ResellerConfiguration.

        Creates a ResellerConfiguration.

        :param body: Request body of a ResellerConfiguration. Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "resellerChannelState": "str",  # Optional. Known values are: "PartialOptIn",
                      "OptOut", and "Optin".
                    "resourceType": "str",  # Optional. "ResellerConfiguration"
                    "tenantIds": [
                        "str"  # Optional.
                    ]
                }
        """

    @distributed_trace_async
    async def post_product_reseller_configuration_by_product_id(
        self, body: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> Union[JSON, str]:
        """Creates a ResellerConfiguration.

        Creates a ResellerConfiguration.

        :param body: Request body of a ResellerConfiguration. Is either a model type or a IO type.
         Default value is None.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or str
        :rtype: JSON or str
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "resellerChannelState": "str",  # Optional. Known values are: "PartialOptIn",
                      "OptOut", and "Optin".
                    "resourceType": "str",  # Optional. "ResellerConfiguration"
                    "tenantIds": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[Union[JSON, str]]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_post_product_reseller_configuration_by_product_id_request(
            product_id=self._config.product_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401, 403, 404, 405, 409, 429]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Request-ID"] = self._deserialize("str", response.headers.get("Request-ID"))

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 400:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 401:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 403:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 405:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 409:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 429:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(Union[JSON, str], deserialized), response_headers)

        return cast(Union[JSON, str], deserialized)
